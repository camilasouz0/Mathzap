// The text to identify rules for each possible step that can be taken

module.exports = {
  NO_CHANGE: 'SEM MUDANÇA',

  // ARITHMETIC

  // e.g. 2 + 2 -> 4 or 2 * 2 -> 4
  SIMPLIFY_ARITHMETIC: 'SIMPLIFICAR ARITMÉTICA',

  // BASICS

  // e.g. 2/-1 -> -2
  DIVISION_BY_NEGATIVE_ONE: 'DIVISÃO POR NEGATIVO',
  // e.g. 2/1 -> 2
  DIVISION_BY_ONE: 'DIVISÃO POR UM',
  // e.g. x * 0 -> 0
  MULTIPLY_BY_ZERO: 'MULTIPLICAR POR ZERO',
  // e.g. x * 2 -> 2x
  REARRANGE_COEFF: 'REARRANJAR COEFICIENTE',
  // e.g. x ^ 0 -> 1
  REDUCE_EXPONENT_BY_ZERO: 'REDUZIR EXPONENTE POR ZERO',
  // e.g. 0/1 -> 0
  REDUCE_ZERO_NUMERATOR: 'REDUZIR O NÚMERADOR ZERO',
  // e.g. 2 + 0 -> 2
  REMOVE_ADDING_ZERO: 'REMOVER ADICIONANDO ZERO',
  // e.g. x ^ 1 -> x
  REMOVE_EXPONENT_BY_ONE: 'REMOVER EXPOÊNTE POR UM',
  // e.g. 1 ^ x -> 1
  REMOVE_EXPONENT_BASE_ONE: 'REMOVER EXPOÊNTE BASE UM',
  // e.g. x * -1 -> -x
  REMOVE_MULTIPLYING_BY_NEGATIVE_ONE: 'REMOVER A MULTIPLICAÇÃO POR NEGATIVO',
  // e.g. x * 1 -> x
  REMOVE_MULTIPLYING_BY_ONE: 'REMOVER MULTIPLICANDO POR UM',
  // e.g. 2 - - 3 -> 2 + 3
  RESOLVE_DOUBLE_MINUS: 'RESOLVER SINAL DUPLICADO',

  // COLLECT AND COMBINE AND BREAK UP

  // e.g. 2 + x + 3 + x -> 5 + 2x
  COLLECT_AND_COMBINE_LIKE_TERMS: 'COLETE E COMBINE OS TERMOS SEMELHANTES',
  // e.g. x + 2 + x^2 + x + 4 -> x^2 + (x + x) + (4 + 2)
  COLLECT_LIKE_TERMS: 'COLETE OS TERMOS',

  // MULTIPLYING CONSTANT POWERS
  // e.g. 10^2 * 10^3 -> 10^(2+3)
  COLLECT_CONSTANT_EXPONENTS: 'COLETE EXPOÊNTES CONSTANTES',

  // ADDING POLYNOMIALS

  // e.g. 2x + x -> 2x + 1x
  ADD_COEFFICIENT_OF_ONE: 'ADICIONE COEFICIENTE DE UM',
  // e.g. x^2 + x^2 -> 2x^2
  ADD_POLYNOMIAL_TERMS: 'ADICIONE TERMOS POLINOMIAIS',
  // e.g. 2x^2 + 3x^2 + 5x^2 -> (2+3+5)x^2
  GROUP_COEFFICIENTS: 'AGRUPAR COEFICIENTES',
  // e.g. -x + 2x => -1*x + 2x
  UNARY_MINUS_TO_NEGATIVE_ONE: 'MULTIPLICAR COEFICIENTE X POR 1',

  // MULTIPLYING POLYNOMIALS
  
  // e.g. x^2 * x -> x^2 * x^1
  ADD_EXPONENT_OF_ONE: 'ADICIONE EXPOÊNTE DE UM',
  // e.g. x^2 * x^3 * x^1 -> x^(2 + 3 + 1)
  COLLECT_POLYNOMIAL_EXPONENTS: 'COLETE EXPOÊNTES POLINOMIAIS',
  // e.g. 2x * 3x -> (2 * 3)(x * x)
  MULTIPLY_COEFFICIENTS: 'MULTIPLICAR COEFICIENTES',
  // e.g. 2x * x -> 2x ^ 2
  MULTIPLY_POLYNOMIAL_TERMS: 'MULTIPLIQUE OS TERMOS POLINOMIAIS',

  // FRACTIONS

  // e.g. (x + 2)/2 -> x/2 + 2/2
  BREAK_UP_FRACTION: 'QUEBRAR FRAÇÃO',
  // e.g. -2/-3 => 2/3
  CANCEL_MINUSES: 'CANCELAR MENOS',
  // e.g. 2x/2 -> x
  CANCEL_TERMS: 'CANCELAR TERMOS',
  // e.g. 2/6 -> 1/3
  SIMPLIFY_FRACTION: 'SIMPLIFICAR FRAÇÃO',
  // e.g. 2/-3 -> -2/3
  SIMPLIFY_SIGNS: 'SIMPLIFICAR SINAIS',
  // e.g. 15/6 -> (5*3)/(2*3)
  FIND_GCD: 'SIMPLIFICAR GRAFICAMENTE',
  // e.g. (5*3)/(2*3) -> 5/2
  CANCEL_GCD: 'CANCELAR SIMPLIFICAÇÃO GRÁFICA',
  // e.g. 1 2/3 -> 5/3
  CONVERT_MIXED_NUMBER_TO_IMPROPER_FRACTION: 'CONVERTER NUMERO MISTO PARA FRAÇÃO IMPROPRIA',
  // e.g. 1 2/3 -> ((1 * 3) + 2) / 3
  IMPROPER_FRACTION_NUMERATOR: 'NUMERADOR DE FRACAO IMPROPRIA',

  // ADDING FRACTIONS

  // e.g. 1/2 + 1/3 -> 5/6
  ADD_FRACTIONS: 'ADICIONAR FRAÇÕES',
  // e.g. (1 + 2)/3 -> 3/3
  ADD_NUMERATORS: 'ADICIONAR NUMERADORES',
  // e.g. (2+1)/5
  COMBINE_NUMERATORS: 'COMBINAR NUMERADORES',
  // e.g. 2/6 + 1/4 -> (2*2)/(6*2) + (1*3)/(4*3)
  COMMON_DENOMINATOR: 'DENOMINADOR COMUM - MDC',
  // e.g. 3 + 1/2 -> 6/2 + 1/2 (for addition)
  CONVERT_INTEGER_TO_FRACTION: 'CONVERTER INTEIRO PARA FRAÇÃO',
  // E.G. 1.2 + 1/2 -> 1.2 + 0.5
  DIVIDE_FRACTION_FOR_ADDITION: 'DIVIDIR FRAÇAO POR ADIÇÃO',
  // E.G. (2*2)/(6*2) + (1*3)/(4*3) -> (2*2)/12 + (1*3)/12
  MULTIPLY_DENOMINATORS: 'MULTIPLICAR DENOMINADORES',
  // E.G. (2*2)/12 + (1*3)/12 -> 4/12 + 3/12
  MULTIPLY_NUMERATORS: 'MULTIPLICAR NUMERADORES',

  // MULTIPLYING FRACTIONS

  // E.G. 1/2 * 2/3 -> 2/6
  MULTIPLY_FRACTIONS: 'MULTIPLICAR FRAÇÕES',

  // DIVISION

  // E.G. 2/3/4 -> 2/(3*4)
  SIMPLIFY_DIVISION: 'SIMPLIFICAR DIVISÃO',
  // E.G. X/(2/3) -> X * 3/2
  MULTIPLY_BY_INVERSE: 'MULTIPLICAR PELO INVERSO',

  // DISTRIBUTION

  // E.G. 2(X + Y) -> 2X + 2Y
  DISTRIBUTE: 'DISTRIBUIR',
  // E.G. -(2 + X) -> -2 - X
  DISTRIBUTE_NEGATIVE_ONE: 'DISTRIBUIR POR -1',
  // E.G. 2 * 4X + 2*5 --> 8X + 10 (AS PART OF DISTRIBUTION)
  SIMPLIFY_TERMS: 'SIMPLIFICAR TERMOS',
  // E.G. (NTHROOT(X, 2))^2 -> NTHROOT(X, 2) * NTHROOT(X, 2)
  // E.G. (2X + 3)^2 -> (2X + 3) (2X + 3)
  EXPAND_EXPONENT: 'EXPANDIR EXPONENTE',

  // ABSOLUTE
  // E.G. |-3| -> 3
  ABSOLUTE_VALUE: 'VALOR ABSOLUTO',

  // ROOTS
  // E.G. NTHROOT(X ^ 2, 4) -> NTHROOT(X, 2)
  CANCEL_EXPONENT: 'CANCELAR EXPOENTE',
  // E.G. NTHROOT(X ^ 2, 2) -> X
  CANCEL_EXPONENT_AND_ROOT: 'CANCELAR EXPOENTE E RAIZ',
  // E.G. NTHROOT(X ^ 4, 2) -> X ^ 2
  CANCEL_ROOT: 'CANCELAR RAIZES',
  // E.G. NTHROOT(2, 2) * NTHROOT(3, 2) -> NTHROOT(2 * 3, 2)
  COMBINE_UNDER_ROOT: 'COMBINAR SOB RAIZ',
  // E.G. 2 * 2 * 2 -> 2 ^ 3
  CONVERT_MULTIPLICATION_TO_EXPONENT: 'CONVERTER MULTIPLICAÇÃO POR EXPOENTE',
  // E.G. NTHROOT(2 * X) -> NTHROOT(2) * NTHROOT(X)
  DISTRIBUTE_NTH_ROOT: 'DISTRIBUIR RAIZES',
  // E.G. NTHROOT(4) * NTHROOT(X^2) -> 2 * X
  EVALUATE_DISTRIBUTED_NTH_ROOT: 'AVALIAR RAIZES DISTRIBUIDAS',
  // E.G. 12 -> 2 * 2 * 3
  FACTOR_INTO_PRIMES: 'FATORAR EM NUMEROS PRIMOS',
  // E.G. NTHROOT(2 * 2 * 2, 2) -> NTHROOT((2 * 2) * 2)
  GROUP_TERMS_BY_ROOT: 'AGRUPAR TERMOS POR RAIZ',
  // E.G. NTHROOT(4) -> 2
  NTH_ROOT_VALUE: 'SOMA DE RAIZES',
  // E.G. NTHROOT(4) + NTHROOT(4) = 2*NTHROOT(4)
  ADD_NTH_ROOTS: 'SOMAR RAIZES',
  // E.G. NTHROOT(X, 2) * NTHROOT(X, 2) -> NTHROOT(X^2, 2)
  MULTIPLY_NTH_ROOTS: 'MULTIPLICAR RAIZES',

  // SOLVING FOR A VARIABLE

  // E.G. X - 3 = 2 -> X - 3 + 3 = 2 + 3
  ADD_TO_BOTH_SIDES: 'ADICIONAR EM AMBOS OS LADOS',
  // E.G. 2X = 1 -> (2X)/2 = 1/2
  DIVIDE_FROM_BOTH_SIDES: 'DIVIDIR EM AMBOS OS LADOS',
  // E.G. (2/3)X = 1 -> (2/3)X * (3/2) = 1 * (3/2)
  MULTIPLY_BOTH_SIDES_BY_INVERSE_FRACTION: 'DIVIDIR EM AMBOS OS LADOS POR FRAÇÃO INVERSA',
  // E.G. -X = 2 -> -1 * -X = -1 * 2
  MULTIPLY_BOTH_SIDES_BY_NEGATIVE_ONE: 'MULTIPLICAR AMBOS OS LABOS POR -1',
  // E.G. X/2 = 1 -> (X/2) * 2 = 1 * 2
  MULTIPLY_TO_BOTH_SIDES: 'MULTIPLICAR AMBOS OS LADOS',
  // E.G. X + 2 - 1 = 3 -> X + 1 = 3
  SIMPLIFY_LEFT_SIDE: 'SIMPLIFICAR LADO ESQUERDO',
  // E.G. X = 3 - 1 -> X = 2
  SIMPLIFY_RIGHT_SIDE: 'SIMPLIFICAR LADO DIREITO',
  // E.G. X + 3 = 2 -> X + 3 - 3 = 2 - 3
  SUBTRACT_FROM_BOTH_SIDES: 'SUBTRAIR AMBOS OS LADOS',
  // E.G. 2 = X -> X = 2
  SWAP_SIDES: 'TROCAR LADOS',
  // E.G. (X - 2) (X + 2) = 0 => X = [-2, 2]
  FIND_ROOTS: 'ENCONTRAR RAIZES',

  // CONSTANT EQUATION

  // e.g. 2 = 2
  STATEMENT_IS_TRUE: 'DEMONSTRAÇÃO VERDADEIRA',
  // e.g. 2 = 3
  STATEMENT_IS_FALSE: 'DEMONSTRAÇÃO FALSA',

  // FACTORING

  // e.g. x^2 - 4x -> x(x - 4)
  FACTOR_SYMBOL: 'FATORAR SIMBOLOS',
  // e.g. x^2 - 4 -> (x - 2)(x + 2)
  FACTOR_DIFFERENCE_OF_SQUARES: 'FATORAR DIFERENÇAS DOS QUADRADOS',
  // e.g. x^2 + 2x + 1 -> (x + 1)^2
  FACTOR_PERFECT_SQUARE: ' FATORAR QUADRADOS PERFEITOS',
  // e.g. x^2 + 3x + 2 -> (x + 1)(x + 2)
  FACTOR_SUM_PRODUCT_RULE: 'FATORAR REGRA DA SOMA DO PRODUTO',
  // e.g. 2x^2 + 4x + 2 -> 2x^2 + 2x + 2x + 2
  BREAK_UP_TERM: 'QUEBRAR TERMOS',
};